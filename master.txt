
1  demo trasnmission udp/tcp



tcpserver.py


import socket

def tcp_server():
    host = '127.0.0.1'  
    port = 65432  

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((host, port))
        server_socket.listen()
        print(f"TCP Server is listening on {host}:{port}")

        conn, addr = server_socket.accept()
        with conn:
            print(f"Connected by {addr}")
            while True:
                data = conn.recv(1024)
                if not data:
                    break
                print(f"Received: {data.decode()}")
                conn.sendall(data)  # Echo back the data

if __name__ == "__main__":
    tcp_server()


tcpclient.py


import socket

def tcp_client():
    host = '127.0.0.1'  
    port = 65432  

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
        client_socket.connect((host, port))
        message = "Hello, TCP Server!"
        client_socket.sendall(message.encode())
        data = client_socket.recv(1024)
        print(f"Received from server: {data.decode()}")

if __name__ == "__main__":
    tcp_client()


udpserver.py

import socket

def udp_server():
    host = '127.0.0.1'  
    port = 65433  

    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as server_socket:
        server_socket.bind((host, port))
        print(f"UDP Server is listening on {host}:{port}")

        while True:
            data, addr = server_socket.recvfrom(1024)
            print(f"Received from {addr}: {data.decode()}")
            server_socket.sendto(data, addr)  # Echo back the data

if __name__ == "__main__":
    udp_server()


udpclient.py

import socket

def udp_client():
    host = '127.0.0.1'  
    port = 65433  

    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as client_socket:
        message = "Hello, UDP Server!"
        client_socket.sendto(message.encode(), (host, port))
        data, server = client_socket.recvfrom(1024)
        print(f"Received from server: {data.decode()}")

if __name__ == "__main__":
    udp_client()





2. chat server btw users



chserver.py


import socket
import threading

# Server Configuration
HOST = '127.0.0.1'
PORT = 12345

# Maintain a list of connected clients
clients = []
client_usernames = {}

def broadcast_message(message, sender_client):
    """Broadcasts a message to all connected clients except the sender."""
    for client in clients:
        if client != sender_client:
            client.send(message.encode())

def handle_client(client_socket, client_address):
    """Handles communication with a connected client."""
    try:
        # Request and store username
        client_socket.send("Enter your username: ".encode())
        username = client_socket.recv(1024).decode().strip()
        client_usernames[client_socket] = username

        welcome_message = f"{username} has joined the chat!"
        print(welcome_message)
        broadcast_message(welcome_message, client_socket)

        while True:
            message = client_socket.recv(1024).decode()
            if not message:
                break
            formatted_message = f"{username}: {message}"
            print(formatted_message)
            broadcast_message(formatted_message, client_socket)

    except ConnectionResetError:
        print(f"{client_usernames[client_socket]} disconnected abruptly.")
    finally:
        # Remove the client from lists
        clients.remove(client_socket)
        broadcast_message(f"{username} has left the chat.", client_socket)
        client_socket.close()

def start_server():
    """Starts the chat server and accepts incoming connections."""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen()
    print(f"Chat server started on {HOST}:{PORT}...")

    while True:
        client_socket, client_address = server_socket.accept()
        print(f"New connection from {client_address}")

        # Add client to list and start a new thread
        clients.append(client_socket)
        client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
        client_thread.start()

if __name__ == "__main__":
    start_server()


chuser.py



import socket
import threading

HOST = '127.0.0.1'
PORT = 12345

def receive_messages(client_socket):
    """Receive and print messages from the server."""
    while True:
        try:
            message = client_socket.recv(1024).decode()
            if message:
                print(message)
        except:
            print("An error occurred. Disconnected from server.")
            client_socket.close()
            break

def start_client():
    """Starts the client and connects to the chat server."""
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((HOST, PORT))

    # Start a thread for receiving messages
    threading.Thread(target=receive_messages, args=(client_socket,)).start()

    # Send messages to the server
    while True:
        message = input()
        if message.lower() == 'exit':
            client_socket.send("has left the chat.".encode())
            break
        client_socket.send(message.encode())

    client_socket.close()

if __name__ == "__main__":
    start_client()


3.checksum algo


checksum.py
-----------------------------------------------
def calculate_checksum(data, bit_size):
    """Calculate checksum for given bit size (8, 12, or 16)."""
    mask = (1 << bit_size) - 1
    return ~sum(data) & mask

def main():
    length = int(input("Enter the length of the data (up to 1024 bytes): "))
    if length > 1024:
        print("Input exceeds the maximum allowed size.")
        return

    # Collect data bytes with validation
    data = []
    for i in range(length):
        byte = int(input(f"Byte {i + 1}: "))
        if 0 <= byte <= 255:
            data.append(byte)
        else:
            print("Invalid byte value. Please enter a number between 0 and 255.")
            return

    # Select checksum type
    choice = int(input("Choose checksum type (1: 8-bit, 2: 12-bit, 3: 16-bit): "))
    bit_sizes = {1: 8, 2: 12, 3: 16}

    if choice in bit_sizes:
        checksum = calculate_checksum(data, bit_sizes[choice])
        print(f"{bit_sizes[choice]}-bit checksum: 0x{checksum:X}")
    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()
-----------------------------------------------



4. distance vector algo


distancevec.py

-----------------------------------------------
import time

class Router:
    def __init__(self, name):
        self.name = name
        self.routing_table = {}

    def initialize(self, graph):
        self.routing_table = {node: (cost, node) for node, cost in graph[self.name].items()}
        self.routing_table[self.name] = (0, self.name)

    def update(self, neighbors):
        updated = False
        for neighbor, cost in neighbors.items():
            for dest, (route_cost, _) in neighbor.routing_table.items():
                new_cost = cost + route_cost
                if dest not in self.routing_table or new_cost < self.routing_table[dest][0]:
                    self.routing_table[dest] = (new_cost, neighbor.name)
                    updated = True
        return updated

    def display(self):
        print(f"\nRouter {self.name} Routing Table:")
        print("Dest\tCost\tNext Hop")
        for dest, (cost, next_hop) in sorted(self.routing_table.items()):
            print(f"{dest}\t{cost}\t{next_hop}")
        print("-" * 30)


def get_user_graph():
    graph = {}
    for _ in range(int(input("Enter number of nodes: "))):
        node = input("\nNode name: ")
        graph[node] = {nbr: int(cost) for _ in range(int(input(f"Neighbors of {node}: ")))
                       for nbr, cost in [input("Neighbor Cost: ").split()]}
    return graph


def distance_vector_routing(graph):
    routers = {name: Router(name) for name in graph}
    for router in routers.values():
        router.initialize(graph)

    print("\nInitial Routing Tables:")
    for router in routers.values():
        router.display()

    print("\nUpdating Routing Tables...\n")
    iteration = 0

    while True:
        updates = False
        for router in routers.values():
            updates |= router.update({routers[nbr]: cost for nbr, cost in graph[router.name].items()})

        iteration += 1
        print(f"\nIteration {iteration}:")
        for router in routers.values():
            router.display()

        if not updates:
            break
        time.sleep(1)

    print("Final Routing Tables Stabilized.")


if __name__ == "__main__":
    distance_vector_routing(get_user_graph())
